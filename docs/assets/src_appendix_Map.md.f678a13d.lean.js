import{_ as s,y as n,S as e,M as o}from"./chunks/framework.a6902a73.js";const F=JSON.parse('{"title":"Map","description":"","frontmatter":{},"headers":[],"relativePath":"src/appendix/Map.md","filePath":"src/appendix/Map.md"}'),l={name:"src/appendix/Map.md"},a=o(`<h1 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h1><p><code>Map</code>是<code>OpenLayers</code>的核心组件，使用<code>Map</code>的构造函数可以创建一个地图对对象，用于添加在网页中的<code>div</code>容器中。<code>Map</code>的功能主要用于渲染地图，添加图层，添加UI控件元素等信息，初始化地图对象的时候，可以传递一个对象，传递一些属性值。如下代码为一个创建地图的实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Map </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/Map</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> View </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/View</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> TileLayer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/layer/Tile</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> OSM </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/source/OSM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">View</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">center</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">zoom</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">layers</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">TileLayer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">OSM</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">map</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><p>创建地图的时候，可以在构造函数中传递如下属性信息：</p><ul><li><em><strong>controls</strong></em>： 与地图相关的控件列表，它有默认添加了一些控件，可进行修改。</li><li><em><strong>pixelRatio</strong></em>：设备上物理像素和设备独立像素（DIP）的比率。</li><li><em><strong>interactions</strong></em>：指定地图上的交互对象。</li><li><em><strong>keyboardEventTarget</strong></em>：用于侦听键盘事件的元素。</li><li><em><strong>layers</strong></em>：用于添加图层，初始化的时候最好指定一个图层。</li><li><em><strong>maxTilesLoading</strong></em>：加载瓦片的最大数量。</li><li><em><strong>moveTolerance</strong></em>：可以扩大地图点击的范围</li><li><em><strong>overlays</strong></em>：初始化时添加到地图上的覆盖物。</li><li><em><strong>target</strong></em>：地图容器，为元素的<code>id</code>。</li><li><em><strong>view</strong></em>：设置地图视图。</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><p><code>Map</code>中的方法如下所示：</p><ul><li><em><strong>addControl</strong></em>：添加控件到地图上。</li><li><em><strong>addInteraction</strong></em>：添加交互事件到地图上。</li><li><em><strong>addLayer</strong></em>：添加图层到地图上，用<code>getLayers()</code>可以获取到已添加的图层。</li><li><em><strong>addOverlay</strong></em>：添加覆盖物到地图上。</li><li><em><strong>changed</strong></em>：计数器更新时触发的事件。</li><li><em><strong>dispatchEvent</strong></em>：用于派发事件。</li><li><em><strong>forEachFeatureAtPixel</strong></em>：针对矢量数据源，通过鼠标点击坐标与<code>Map</code>坐标对比，获取选中要素。</li><li><em><strong>forEachLayerAtPixel</strong></em>：通过鼠标点击坐标与<code>Map</code>坐标对比，获取选中的图层。</li><li><em><strong>get</strong></em>：根据键名称获取相关值。</li><li><em><strong>getControls</strong></em>：获取添加的控件列表。</li><li><em><strong>getCoordinateFromPixel</strong></em>：获取鼠标所在位置的坐标值信息。</li><li><em><strong>getEventCoordinate</strong></em>：返回浏览器事件的用户投影中的坐标。如：<code>map.getEventCoordinate(e.originalEvent)</code>，注意，这里要用<code>originalEvent</code>。</li><li><em><strong>getEventPixel</strong></em>：根据事件来获取屏幕坐标，如：<code>map.getEventPixel(e.originalEvent)</code>，注意，这里要用<code>originalEvent</code>。</li><li><em><strong>getFeaturesAtPixel</strong></em>：获取鼠标光标处的要素信息，如<code>map.getFeaturesAtPixel(e.pixel)</code>;</li><li><em><strong>getInteractions</strong></em>：获取交互事件的列表。</li><li><em><strong>getKeys</strong></em>：获取添加的键列表。</li><li><em><strong>getLayerGroup</strong></em>：获取地图的图层组。</li><li><em><strong>getLayers</strong></em>：获取添加在地图上的所有图层。</li><li><em><strong>getOverlayById</strong></em>：根据<code>id</code>来获取地图覆盖物。</li><li><em><strong>getOverlays</strong></em>：获取添加的所有覆盖物。</li><li><em><strong>getPixelFromCoordinate</strong></em>：将坐标值转成屏幕坐标。</li><li><em><strong>getProperties</strong></em>：获取地图对象的属性和对应的值。</li><li><em><strong>getRevision</strong></em>：获取地图对象的版本号，当地图对象更改时，版本号将递增。</li><li><em><strong>getSize</strong></em>：获取地图的尺寸。</li><li><em><strong>getTarget</strong></em>：获取地图容器元素的ID值。</li><li><em><strong>getTargetElement</strong></em>：获取地图容器元素对象。</li><li><em><strong>getView</strong></em>：获取地图视图对象。</li><li><em><strong>getViewport</strong></em>：获取地图的视口元素。</li><li><em><strong>hasFeatureAtPixel</strong></em>：获取鼠标光标处是否有要素信息。</li><li><em><strong>on</strong></em>：用于给地图添加事件。</li><li><em><strong>once</strong></em>：添加只需执行一次的事件。</li><li><em><strong>removeControl</strong></em>：删除控件。</li><li><em><strong>removeInteraction</strong></em>：删除交互事件。</li><li><em><strong>removeLayer</strong></em>：删除指定图层。</li><li><em><strong>removeOverlay</strong></em>：删除指定的覆盖物。</li><li><em><strong>render</strong></em>：地图渲染函数。</li><li><em><strong>renderSync</strong></em>：返回同步渲染器。</li><li><em><strong>set</strong></em>：设置键值对。</li><li><em><strong>setLayerGroup</strong></em>：设置图层组。</li><li><em><strong>setProperties</strong></em>：设置属性。</li><li><em><strong>setSize</strong></em>：修改地图尺寸。</li><li><em><strong>setTarget</strong></em>：设置地图容器的元素ID。</li><li><em><strong>setView</strong></em>：设置地图视图。</li><li><em><strong>un</strong></em>：删除事件。</li><li><em><strong>unset</strong></em>：删除设置的键值对属性。</li><li><em><strong>updateSize</strong></em>：更新地图的尺寸。</li></ul>`,9),t=[a];function r(p,i,c,g,m,y){return n(),e("div",null,t)}const d=s(l,[["render",r]]);export{F as __pageData,d as default};
