import{_ as s,y as e,S as o,M as n}from"./chunks/framework.a6902a73.js";const F=JSON.parse('{"title":"VectorLayer","description":"","frontmatter":{},"headers":[],"relativePath":"src/appendix/VectorLayer.md","filePath":"src/appendix/VectorLayer.md"}'),t={name:"src/appendix/VectorLayer.md"},l=n(`<h1 id="vectorlayer" tabindex="-1">VectorLayer <a class="header-anchor" href="#vectorlayer" aria-label="Permalink to &quot;VectorLayer&quot;">​</a></h1><p><code>ol.layer.Vector</code>是一个矢量图层，我们根据坐标值或者通过绘制生成的几何体，都是使用<code>VectorLayer</code>来添加的。如下所示，这创建一个矢量图层：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Vector</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">VectorLayer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/layer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> GeoJSON </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/format/GeoJSON</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> source </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">VectorLayer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">features</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">GeoJSON</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFeatures</span><span style="color:#BABED8;">(geojsonObj)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><ul><li><em><strong>className</strong></em>：设置图层元素的CSS类名。</li><li><em><strong>opacity</strong></em>：设置图层的透明度。</li><li><em><strong>visible</strong></em>：设置图层是否可见。</li><li><em><strong>extent</strong></em>：设置图层的范围，在该范围外的将不会渲染。</li><li><em><strong>zIndex</strong></em>：设置渲染的顺序。如果默认没有设置，将按钮添加的顺序来渲染。</li><li><em><strong>minResolution</strong></em>：图层显示时的最小分辨率。</li><li><em><strong>maxResolution</strong></em>：图层显示时的最大分辨率。</li><li><em><strong>source</strong></em>：图层的数据来源，将在source篇单独介绍。</li><li><em><strong>map</strong></em>：设置图层依赖的地图。</li><li><em><strong>renderOrder</strong></em>：渲染顺序。用一个函数来设置渲染的顺序。</li><li><em><strong>renderBuffer</strong></em>：缓冲区渲染值。</li><li><em><strong>declutter</strong></em>：分离图像和文本。</li><li><em><strong>style</strong></em>：设置样式。</li><li><em><strong>updateWhileAnimating</strong></em>：动画在执行的时候是否可以更新图层。</li><li><em><strong>updateWhileInteracting</strong></em>：在进行交互的时候是否可以更新图层。</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><ul><li><em><strong>getExtent</strong></em>：获取图层的范围。</li><li><em><strong>getMaxResolution</strong></em>：获取最大分辨率。</li><li><em><strong>getMaxZoom</strong></em>：获取最大缩放等级。</li><li><em><strong>getMinResolution</strong></em>：获取最小分辨率。</li><li><em><strong>getMinZoom</strong></em>：获取最小缩放等级。</li><li><em><strong>getOpacity</strong></em>：获取透明度。</li><li><em><strong>getProperties</strong></em>：获取属性的键和值。</li><li><em><strong>getRevision</strong></em>：获取图层对象的版本号，当修改对象后，版本号会递增。</li><li><em><strong>getSource</strong></em>：获取地图数据来源。</li><li><em><strong>getVisible</strong></em>：获取地图的可见信息。</li><li><em><strong>getZIndex</strong></em>：获取图层渲染的顺序值。</li><li><em><strong>on</strong></em>：添加事件。</li><li><em><strong>once</strong></em>：添加一次执行的事件。</li><li><em><strong>setExtent</strong></em>：设置图层范围。</li><li><em><strong>setMap</strong></em>：为图层设置图层。</li><li><em><strong>setMaxResolution</strong></em>：设置最大分辨率。</li><li><em><strong>setMaxZoom</strong></em>：设置地图最大的缩放等级。</li><li><em><strong>setMinResolution</strong></em>：设置最小分辨率。</li><li><em><strong>setMinZoom</strong></em>：设置地图最小缩放等级。</li><li><em><strong>setOpacity</strong></em>：设置透明度。</li><li><em><strong>setProperties</strong></em>：设置属性信息。</li><li><em><strong>setSource</strong></em>：设置图层数据来源。</li><li><em><strong>setVisible</strong></em>：设置是否隐藏。</li><li><em><strong>setZIndex</strong></em>：设置渲染顺序。</li><li><em><strong>getFeatures</strong></em>：获取几何列表。</li><li><em><strong>getStyle</strong></em>：获取矢量图层的样式。</li><li><em><strong>getStyleFunction</strong></em>：获取设置样式的函数。</li><li><em><strong>setStyle</strong></em>：设置样式信息。</li></ul>`,7),r=[l];function a(i,p,c,m,g,y){return e(),o("div",null,r)}const d=s(t,[["render",a]]);export{F as __pageData,d as default};
