import{_ as e,y as s,S as o,M as l}from"./chunks/framework.a6902a73.js";const D=JSON.parse('{"title":"Style","description":"","frontmatter":{},"headers":[],"relativePath":"src/appendix/Style.md","filePath":"src/appendix/Style.md"}'),n={name:"src/appendix/Style.md"},t=l(`<h1 id="style" tabindex="-1">Style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;Style&quot;">​</a></h1><p><code>Style</code>用于矢量图层的渲染，在添加矢量图层的时候，可以给图层中的几何体设置样式。样式类型包括<code>Circle</code>，<code>Fill</code>，<code>Icon</code>，<code>Image</code>，<code>RegularShape</code>，<code>Stroke</code>，<code>Text</code>，<code>TextPlacement</code>等。在创建<code>Style</code>的对象的时候，可以在构造函数中设置相关的属性参数来设置具体的样式。在渲染适量图层的时候，如果没有指定<code>Style</code>，将使用框架默认的样式信息，如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">Fill</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Stroke</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Circle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Style</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ol/style</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fill </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Fill</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rgba(255,255,255,0.4)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stroke </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Stroke</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#3399CC</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1.25</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> styles </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Style</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Circle</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#F07178;">fill</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> fill</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#F07178;">stroke</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> stroke</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#F07178;">radius</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#F07178;">fill</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> fill</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#F07178;">stroke</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> stroke</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;"> ]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="style-属性" tabindex="-1">Style 属性 <a class="header-anchor" href="#style-属性" aria-label="Permalink to &quot;Style 属性&quot;">​</a></h2><ul><li><em><strong>geometry</strong></em>：指定该样式的几何图形。</li><li><em><strong>fill</strong></em>：填充样式。</li><li><em><strong>image</strong></em>：图标样式。</li><li><em><strong>renderer</strong></em>：自定义的样式渲染器，可以为每个图形设置不一样的样式。</li><li><em><strong>stroke</strong></em>：边框样式。</li><li><em><strong>text</strong></em>：文本样式。</li><li><em><strong>zIndex</strong></em>：索引值。</li></ul><h2 id="style-方法" tabindex="-1">Style 方法 <a class="header-anchor" href="#style-方法" aria-label="Permalink to &quot;Style 方法&quot;">​</a></h2><ul><li><em><strong>clone</strong></em>：复制一个样式。</li><li><em><strong>getFill</strong></em>：获取填充样式。</li><li><em><strong>getGeometry</strong></em>：获取几何体。</li><li><em><strong>getGeometryFunction</strong></em>：获取为几何体设置的渲染函数。</li><li><em><strong>getImage</strong></em>：获取图片样式。</li><li><em><strong>getRenderer</strong></em>：获取自定义的渲染器。</li><li><em><strong>getStroke</strong></em>：获取边框样式。</li><li><em><strong>getText</strong></em>：获取文本样式。</li><li><em><strong>getZIndex</strong></em>：获取索引值。</li><li><em><strong>setFill</strong></em>：设置填充样式。</li><li><em><strong>setGeometry</strong></em>：设置几何体。</li><li><em><strong>setImage</strong></em>：设置图片样式。</li><li><em><strong>setRenderer</strong></em>：设置自定义渲染函数。</li><li><em><strong>setStroke</strong></em>：设置边框样式。</li><li><em><strong>setText</strong></em>：设置文本样式。</li><li><em><strong>setZIndex</strong></em>：设置索引值。</li></ul><h2 id="regularshape-属性" tabindex="-1">RegularShape 属性 <a class="header-anchor" href="#regularshape-属性" aria-label="Permalink to &quot;RegularShape 属性&quot;">​</a></h2><p>用于为几何体设置规则的样式，如果有指定一个半径，将设置为正多边形，如果指定了两个半径，将设置为星星的形状。</p><ul><li><em><strong>fill</strong></em>：设置填充的样式。</li><li><em><strong>points</strong></em>：设置多边形的点数。如果是正多边形，边数和点数一样。</li><li><em><strong>radius</strong></em>：图形的半径。</li><li><em><strong>radius1</strong></em>：星星的外半径。</li><li><em><strong>radius2</strong></em>：星星的内半径。</li><li><em><strong>angle</strong></em>：弧度。</li><li><em><strong>displacement</strong></em>：变形。</li><li><em><strong>stroke</strong></em>：边框样式。</li><li><em><strong>rotation</strong></em>：弧度旋转。</li><li><em><strong>rotateWithView</strong></em>：是否随视图旋转形状。</li></ul><h2 id="regularshape-方法" tabindex="-1">RegularShape 方法 <a class="header-anchor" href="#regularshape-方法" aria-label="Permalink to &quot;RegularShape 方法&quot;">​</a></h2><ul><li><em><strong>clone</strong></em>：复制一个样式。</li><li><em><strong>getAnchor</strong></em>：获取图形的锚点，一般为图形的中心点。</li><li><em><strong>getAngle</strong></em>：获取角度。</li><li><em><strong>getFill</strong></em>：获取填充样式。</li><li><em><strong>getImage</strong></em>：获取图片元素。</li><li><em><strong>getPoints</strong></em>：获取图形的顶点数。</li><li><em><strong>getRadius</strong></em>：获取图形的半径。</li><li><em><strong>getRadius2</strong></em>：获取图形的半径，像星星这样的形状会有两个半径。</li><li><em><strong>getStroke</strong></em>：获取边框样式。</li></ul><h2 id="circlestyle-属性" tabindex="-1">CircleStyle 属性 <a class="header-anchor" href="#circlestyle-属性" aria-label="Permalink to &quot;CircleStyle 属性&quot;">​</a></h2><p><code>CircleStyle</code>可以为几何体设置圆形样式，比如给单个点可以设置一个圆形的样式。继承于<code>RegularShape</code>。</p><ul><li><em><strong>fill</strong></em>：填充的样式。</li><li><em><strong>radius</strong></em>：圆半径。</li><li><em><strong>stroke</strong></em>：圆边框样式。</li></ul><h2 id="circlestyle-方法" tabindex="-1">CircleStyle 方法 <a class="header-anchor" href="#circlestyle-方法" aria-label="Permalink to &quot;CircleStyle 方法&quot;">​</a></h2><p>没什么新的方法，都是<code>RegularShape</code>继承下来的方法。</p><h2 id="icon-属性" tabindex="-1">Icon 属性 <a class="header-anchor" href="#icon-属性" aria-label="Permalink to &quot;Icon 属性&quot;">​</a></h2><p>用于给图标设置样式。</p><ul><li><em><strong>anchor</strong></em>：设置图标的锚点，默认为图形的中心点<code>[0.5, 0.5]</code></li><li><em><strong>anchorOrigin</strong></em>：描点偏移的位置，包括<code>bottom-left</code>, <code>bottom-right</code>, <code>top-left</code>, <code>top-right</code>。</li><li><em><strong>anchorXUnits</strong></em>：指定锚点<strong>X</strong>的单位，默认为百分比，也可以使用px。</li><li><em><strong>anchorYUnits</strong></em>：指定锚点<strong>Y</strong>的单位，默认为百分比，也可以使用px。</li><li><em><strong>color</strong></em>：为图标设置颜色，如果没指定，将保持原有的颜色。</li><li><em><strong>crossOrigin</strong></em>：跨域属性，如果是为<code>canvas</code>渲染器来加载图像，必需设置该属性。</li><li><em><strong>img</strong></em>：设置Image对象，如果没有设置<code>src</code>必须为已加载的<code>Image</code>对象，并且需要指定<code>size</code>值。</li><li><em><strong>offset</strong></em>：设定图片的偏移值。</li><li><em><strong>displacement</strong></em>：变形值。</li><li><em><strong>offsetOrigin</strong></em>：设置原点偏移，<code>bottom-left</code>, <code>bottom-right</code>, <code>top-left</code>, <code>top-right</code>。</li><li><em><strong>opacity</strong></em>：设置透明度。</li><li><em><strong>scale</strong></em>：设置缩放值。</li><li><em><strong>rotateWithView</strong></em>：是否随视图旋转形状。</li><li><em><strong>rotation</strong></em>：旋转角度。</li><li><em><strong>size</strong></em>：图标尺寸。</li><li><em><strong>imgSize</strong></em>：<code>Image</code>对象的尺寸。</li><li><em><strong>src</strong></em>：图片地址。</li></ul><h2 id="icon-方法" tabindex="-1">Icon 方法 <a class="header-anchor" href="#icon-方法" aria-label="Permalink to &quot;Icon 方法&quot;">​</a></h2><ul><li><em><strong>getAnchor</strong></em>：获取锚点。</li><li><em><strong>getColor</strong></em>：获取颜色。</li><li><em><strong>getOrigin</strong></em>：获取原点。</li><li><em><strong>getSize</strong></em>：获取<code>Icon</code>的尺寸。</li><li><em><strong>getSrc</strong></em>：获取图片地址。</li><li><em><strong>setAnchor</strong></em>：设置锚点。</li></ul><h2 id="stroke-属性" tabindex="-1">Stroke 属性 <a class="header-anchor" href="#stroke-属性" aria-label="Permalink to &quot;Stroke 属性&quot;">​</a></h2><p>用于设置边框的颜色，如果没指定时将使用默认的样式。</p><ul><li><em><strong>color</strong></em>：边框颜色。</li><li><em><strong>lineCap</strong></em>：线段两端的样式，可以设置成<code>butt</code>，<code>round</code>，<code>square</code></li><li><em><strong>lineJoin</strong></em>：线条连接处的样式，可以设置成<code>bevel</code>，<code>round</code>，<code>miter</code></li><li><em><strong>lineDash</strong></em>：虚线。</li><li><em><strong>lineDashOffset</strong></em>：虚线偏移值。</li><li><em><strong>miterLimit</strong></em>：连接处的限制值。</li><li><em><strong>width</strong></em>：边框的宽度。</li></ul><h2 id="stroke-方法" tabindex="-1">Stroke 方法 <a class="header-anchor" href="#stroke-方法" aria-label="Permalink to &quot;Stroke 方法&quot;">​</a></h2><ul><li><em><strong>getColor</strong></em>：获取颜色。</li><li><em><strong>getLineCap</strong></em>：获取线段两端的样式。</li><li><em><strong>getLineDash</strong></em>：获取虚线值。</li><li><em><strong>getLineDashOffset</strong></em>：获取虚线偏移值。</li><li><em><strong>getLineJoin</strong></em>：获取线条连接处的样式。</li><li><em><strong>getMiterLimit</strong></em>：获取连接处的限制值。</li><li><em><strong>getWidth</strong></em>：获取边框宽度。</li><li><em><strong>setColor</strong></em>：设置颜色。</li><li><em><strong>setLineCap</strong></em>：设置线段两端的样式。</li><li><em><strong>setLineDash</strong></em>：设置虚线值。</li><li><em><strong>setLineDashOffset</strong></em>：设置虚线偏移值。</li><li><em><strong>setLineJoin</strong></em>：设置线条连接处的样式。</li><li><em><strong>setMiterLimit</strong></em>：设置获取连接处的限制值。</li><li><em><strong>setWidth</strong></em>：设置宽度。</li></ul><h2 id="imagestyle-属性" tabindex="-1">ImageStyle 属性 <a class="header-anchor" href="#imagestyle-属性" aria-label="Permalink to &quot;ImageStyle 属性&quot;">​</a></h2><p>一个抽象类，主要用于创建子类，子类包括<code>RegularShape</code>，<code>CircleStyle</code>，<code>Icon</code>。</p><ul><li><em><strong>opacity</strong></em>：设置透明度。</li><li><em><strong>rotateWithView</strong></em>：是否随视图旋转形状。</li><li><em><strong>rotation</strong></em>：弧度旋转。</li><li><em><strong>scale</strong></em>：缩放比例。</li><li><em><strong>displacement</strong></em>：变形。</li></ul><h2 id="text-属性" tabindex="-1">Text 属性 <a class="header-anchor" href="#text-属性" aria-label="Permalink to &quot;Text 属性&quot;">​</a></h2><ul><li><em><strong>font</strong></em>：设置字体样式，默认为<code>&#39;10px sans-serif&#39;</code>。</li><li><em><strong>maxAngle</strong></em>：当<code>placement</code>设置为<code>line</code>时，可以设置字符之间的最大角度。</li><li><em><strong>offsetX</strong></em>：水平偏移值。</li><li><em><strong>offsetY</strong></em>：垂直偏移值。</li><li><em><strong>overflow</strong></em>：是否允许溢出。</li><li><em><strong>placement</strong></em>：文本放置方向。</li><li><em><strong>scale</strong></em>：缩放比例。</li><li><em><strong>rotateWithView</strong></em>：是否随视图旋转形状。</li><li><em><strong>rotation</strong></em>：弧度旋转。</li><li><em><strong>text</strong></em>：文本信息。</li><li><em><strong>textAlign</strong></em>： 文本对齐方式。<code>left</code>, <code>right</code>, <code>center</code>, <code>end</code>, <code>start</code>。</li><li><em><strong>textBaseline</strong></em>：基线对齐方向，<code>bottom</code>, <code>top</code>, <code>middle</code>, <code>alphabetic</code>, <code>hanging</code>, <code>ideographic</code>.</li><li><em><strong>fill</strong></em>：填充样式。</li><li><em><strong>stroke</strong></em>：边框样式</li><li><em><strong>backgroundFill</strong></em>：背景填充样式。</li><li><em><strong>backgroundStroke</strong></em>：背景边框样式。</li><li><em><strong>padding</strong></em>：内边距。</li></ul><h2 id="text-方法" tabindex="-1">Text 方法 <a class="header-anchor" href="#text-方法" aria-label="Permalink to &quot;Text 方法&quot;">​</a></h2><p>方法主要是对属性值进行<code>get</code>和<code>set</code>的操作。</p>`,34),a=[t];function r(i,c,p,g,m,d){return s(),o("div",null,a)}const F=e(n,[["render",r]]);export{D as __pageData,F as default};
